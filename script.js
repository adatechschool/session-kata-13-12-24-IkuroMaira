// Liste des couleurs validesconst validColoursList = [    'blue',    'red',    'pink',    'yellow',    'green',    'black',    'white',    'orange',    'purple',];const secretCode = [    'blue',    'blue',    'yellow',    'green'];const colorCode = [    'blue',    'red',    'yellow',    'green',];const testCode1 = [    'blue',    'coucou',    '123',    123,]const testCode2 = [    'blue',    'coucou',    '123',    123,    'yellow',]// Ajouter la possibilit√© de choisir dans les couleurs valides le code secret// √Ä la fin l‚Äôutilisateur, va choisir 4 couleurs (boutons) et je vais stocker la valeur dans un tableau et ce tableau sera envoy√© dans mes fonctions...// On v√©rifie si les valeurs du tableau sont au format string et qu'il n'y a que 4 couleursconst checkCode = (code) => {    if (code.length > 4) {        console.log(`Le tableau d√©passe les 4 couleurs. Veuillez choisir que 4 couleurs.`)    } else {        for (const color of code) {            if (typeof color === "string") {                // appelle un fonction qui va v√©r√©fier dans le tableau des couleurs valides                checkWithValidColor(color);            } else {                console.log(`‚ö†Ô∏è Error! la couleur est de type : ${typeof color}`);            }        }    }}const checkWithValidColor = (colorValue) => {    // console.log(value);    if (validColoursList.includes(colorValue)) {        console.log(`‚úÖ  La couleur est valide : ${colorValue}`)    } else {        console.log(`‚ùå  Ce n'est pas une couleur valide ! : ${colorValue}`);    }}const codeWin = (chosenCode, guessCode) => {    console.log(chosenCode);    console.log(guessCode);    // V√©rifie la longueur des tableaux    if (chosenCode.length === guessCode.length) {        console.log('Vous avez gagn√© ! üèÜ');    }}checkCode(colorCode);console.log('======');checkCode(testCode1);console.log('======');checkCode(testCode2);codeWin(colorCode, secretCode);